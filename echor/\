use clap::{command, Arg, ArgAction};
use itertools::Itertools;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let matches = command!()
        .version("0.1.0")
        .author("dkuku")
        .about("Rust echo")
        .args([
            Arg::new("text")
                .value_name("TEXT")
                .help("Input text")
                .action(ArgAction::Append)
                .required(true),
            Arg::new("omit_newline")
                .short('n')
                .action(ArgAction::SetTrue)
                .help("Do not print newline"),
        ])
        .get_matches();

    let ending = if matches.get_flag("omit_newline") {
        ""
    } else {
        "\n"
    };
    match matches.try_get_many("text")? {
        Some(text) => {
            println!("{}{}", text.join(" "), ending);
        }
        None => (),
    }
    Ok(())
}
